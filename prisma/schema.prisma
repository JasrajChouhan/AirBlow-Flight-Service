// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Airplane {
  id String @id @default(cuid())
  modelNumber String @unique
  capacity String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  flights Flight[]

  airportId   String?
  airport     Airport? @relation(fields: [airportId], references: [id], onDelete: Cascade)

  @@index([modelNumber])

}

// City Model
model City {
  id String @id @default(cuid())
  name String
  pincode String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Airport {
  id        String @id @default(cuid())
  name      String @unique
  code      String @unique
  airplanes  Airplane[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  flightsDeparture Flight[] @relation("DepartureAirport")
  flightsArrival   Flight[] @relation("ArrivalAirport")

  @@index([name])
  @@index([code])
}

// Flight Model

model Flight {
  flightNumber String @unique
  airplaneId String
  departureAirportId String
  arrivalAirportId   String 
  arrivalTime DateTime
  departureTime DateTime
  price Int
  boardingGate String
  totalSeats Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  airplane          Airplane @relation(fields: [airplaneId], references: [id], onDelete: Cascade)
  departureAirport  Airport  @relation("DepartureAirport", fields: [departureAirportId], references: [id], onDelete: Cascade)
  arrivalAirport    Airport  @relation("ArrivalAirport", fields: [arrivalAirportId], references: [id], onDelete: Cascade)

  @@index([departureAirportId])
  @@index([arrivalAirportId])
}
